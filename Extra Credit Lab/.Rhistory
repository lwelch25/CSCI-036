answer04 <- c("AA",0, "FF", "5E")
answer02 <- c("01001101", "10000111", "10100100", "11111111")
knitr::opts_chunk$set(echo = TRUE, fig.height = 3, fig.width = 5)
options(tibble.width = 62)
library(dplyr)
library(tibble)
library(knitr)
library(dplyr)
library(tibble)
library(knitr)
mean(c(5, 3, 5))
ec1 <- tibble(
color = c("blue", "red", "red"),
reflect = c(5, 3, 5),
lighting = c(5, 12, 11)
)
ec1 |>
summarize(mean_reflect = mean(reflect))
ec1 |>
summarize(mean(reflect))
trattorias |>
summarize(m = mean(price), n = n())
answer01 <- 1
answer02 <- 2
ec1 |> kable()
ec1 |> filter(color == "blue") |> kable()
ec1 |> filter(color == "red") |> kable()
ec1 |>
group_by(color) |>
kable()
ec1 |>
filter(color == "blue") |>
summarize(mean_reflect = mean(reflect),
median_reflect = median(reflect),
median_cross = median(lighting))
ec1 |>
filter(color == "blue") |>
summarize(mean_reflect = mean(reflect),
median_reflect = median(reflect),
median_cross = median(lighting)) |>
mutate("color" = "blue", .before = 1)
ec1 |>
filter(color == "red") |>
summarize(mean_reflect = mean(reflect),
median_reflect = median(reflect),
median_cross = median(lighting)) |>
mutate("color" = "red", .before = 1)
union(
ec1 |>
filter(color == "blue") |>
summarize(mean_reflect = mean(reflect),
median_reflect = median(reflect),
median_cross = median(lighting)) |>
mutate("color" = "blue", .before = 1),
ec1 |>
filter(color == "red") |>
summarize(mean_reflect = mean(reflect),
median_reflect = median(reflect),
median_cross = median(lighting)) |>
mutate("color" = "red", .before = 1)
) |> kable()
ec1 |>
group_by(color) |>
summarize(mean_reflect = mean(reflect),
median_reflect = median(reflect),
median_cross = median(lighting)) |>
kable()
answer03 <- 12
answer05 <- iris |>
group_by(Species) |>
mutate(a = mean(Sepal.Legth), b = mean(Petal.Length))
answer05 <- iris |>
group_by(Species) |>
summarize(a = mean(Sepal.Legth), b = mean(Petal.Length))
answer05 <- iris |>
group_by(Species) |>
summarize(a = mean(Sepal.Length),
b = median(Petal.Length))
answer05 <- iris |>
group_by(Species) |>
summarize(a = mean(Sepal.Length),
b = median(Petal.Length))
answer05()
answer05 <- iris |>
group_by(Species) |>
summarize(a = mean(Sepal.Length),
b = median(Petal.Length))
answer05
answer05 <- iris |>
group_by(Species) |>
summarize(a = mean(Sepal.Length),
b = mean(Petal.Length))
answer05
answer05 <- iris |>
group_by(Species) |>
summarize(a = mean(Sepal.Length),
b = mean(Petal.Length))
knitr::purl
knitr::purl
`knitr::purl`
knitr::purl
knitr::purl
knitr::purl
answer08 <- 55
answer07 <- 1
library(knitr)
opts_chunk$set(echo = TRUE, fig.height = 3, fig.width = 5)
#Color Format
colFmt = function(x,color){
outputFormat = opts_knit$get("rmarkdown.pandoc.to")
if(outputFormat == 'latex')
paste("\\textcolor{",color,"}{",x,"}",sep="")
else if(outputFormat == 'html')
paste("<font color='",color,"'>",x,"</font>",sep="")
else
x
}
#Box Format
boxFmt = function(x){
outputFormat = opts_knit$get("rmarkdown.pandoc.to")
if(outputFormat == 'latex')
paste("\\framebox{\\hspace*{1em} ", x, "}")
else if(outputFormat == 'html')
paste("<span class=\"boxed\">", x , "</span>")
else
x
}
library(tidyverse)
answer02 <- c("01001101", "10000111", "10100100", "11111111")
answer04 <- c("AA",0, "FF", "5E")
knitr::purl("lab_submission.Rmd")
setwd("~/Desktop/CSCI 036/Extra Credit Lab")
knitr::purl("lab_submission.Rmd")
Visualizing monopoly
Visualizing monopoly
library(tidyverse)
library(hrbrthemes)
library(openxlsx)
library(magrittr)
library(extrafont)
library(ggnewscale)
library(cowplot)
font_import(paths = c("C:/Users/rodrigo.revilla/AppData/Local/Microsoft/Windows/Fonts", prompt = F))
library(extrafont)
loadfonts()
#Generating dataframe
ymins <- c(rep(0,11),0.4,seq(1,5.5,0.5),rep(5.5,9),seq(5.5,1,-0.5))
ymaxs <- c(rep(1,11),1,seq(1.5,5.5,0.5),6.5,rep(6.5,10),seq(5.5,1.5,-0.5))
xmins <- c(seq(5.5,1,-0.5),0,0.4,rep(0,10),seq(1,5.5,0.5),rep(5.5,9))
xmaxs <- c(6.5,seq(5.5,1.5,-0.5),rep(1,12),seq(1.5,5.5,0.5),rep(6.5,10))
id<-c(seq(0,10),10.5,seq(11,39))
tiles <- data.frame(xmins,xmaxs,ymins,ymaxs,id)
ymins <- c(rep(0.8,5),1,2,2.5,3.5,4.5,5,rep(5.5,6),5,4.5,3.5,2,1)
ymaxs <- c(rep(1,5),1.5,2.5,3,4,5,5.5,rep(5.7,6),5.5,5,4,2.5,1.5)
xmins <-c(5,4,2.5,1.5,1,rep(0.8,6),1,2,2.5,3.5,4,5,rep(5.5,5))
xmaxs <-c(5.5,4.5,3,2,1.5,rep(1,6),1.5,2.5,3,4,4.5,5.5,rep(5.7,5))
colors <- c(rep("#945438",2),rep("#abe0f8",3),rep("#d93a96",3),rep("#f7941d",3),rep("#ed1b24",3),rep("#fef200",3),rep("#20b15a",3),rep("#0172ba",2))
group_tiles <- data.frame(xmins,xmaxs,ymins,ymaxs,colors)
simulation_results <- read.csv2('C:/Users/rodrigo.revilla/Desktop/simulation_results.csv',sep=",",header=FALSE)
simulation_results %<>% group_by(V2) %>% summarise(n=n()) %>% ungroup()
simulation_results %<>% mutate(percentage=n/sum(simulation_results$n))
simulation_results %<>% mutate(V2 = V2 %>% as.character() %>% as.numeric())
tiles  %<>%  left_join(simulation_results %>% select(-n),by=c("id"="V2"))
tiles  %<>%  mutate(perc_label = scales::percent(percentage,accuracy = 0.1),x_lab=xmins+(xmaxs-xmins)/2,y_lab=ymins+(ymaxs-ymins)/2)
tiles  %<>%  mutate(y_lab=ifelse(id%in%c(0,10),0.250,y_lab)) %>% mutate(y_lab=ifelse(id%in%c(10.5),0.8,y_lab))
a<-ggplot()+
geom_rect(data=tiles,aes(xmin=xmins,xmax=xmaxs,ymin=ymins,ymax=ymaxs,fill=percentage),color="white")+
scale_fill_continuous(low = "#fde5d9",high = "#c41e1e",labels = scales::percent_format(accuracy=0.1),name="Probability",guide=guide_legend(keywidth = 1))+
new_scale_fill()+
geom_rect(data=group_tiles,aes(xmin=xmins,xmax=xmaxs,ymin=ymins,ymax=ymaxs,fill=colors),color="white")+
scale_fill_identity()+
geom_text(data=tiles,aes(x=x_lab,y=y_lab,label=perc_label,color=ifelse(id%in%c(0,10.5),"white","black")),size=4,fontface="bold")+
scale_color_manual(values=c("black","white"),guide=FALSE)+
geom_label(aes(x=6.5/2-0.35,y=(6.5/2)+1.3,label="THE PROBABILITIES OF"),size=5,color="white",fill="gray60",family="Kabel-Heavy",label.padding = unit(0.4,"lines"))+
geom_label(aes(x=6.5/2,y=(6.5/2)+0.9,label="MONOPOLY"),size=12,color="white",fill="#ee1b24",family="Kabel-Heavy",label.padding = unit(0.5,"lines"))+
geom_text(aes(x=6.5/2,y=2.4,label="SPACE COLOR INDICATES THE RELATIVE \n PROBABILITY OF LANDING ON IT OVER \n500,000 SIMULATIONS OF THE GAME\n\nConsiders dice rolls, 'the three-doubles rule',\nCommunity Chest and Chance Cards, and \nlanding on the 'Go To Jail' Tile"),fontface="bold",color="gray50")+
geom_text(aes(x=6,y=0.6,label="GO"),color="white",family="Kabel-Heavy",size=5)+
geom_text(aes(x=0.7,y=0.62,label="JAIL"),color="white",family="Kabel-Heavy",size=3)+
geom_text(aes(x=2.75,y=5.25,label="ILLINOIS AVE."),family="Kabel-Heavy",size=4,color="gray55")+
geom_segment(aes(x=2.75,y=5.48,xend=2.75,yend=5.35),size=0.8,color="gray60")+
geom_segment(aes(x=6.2,y=0.45,xend=5.8,yend=0.45),color="white",arrow = arrow(length = unit(0.15, "cm")),size=0.6)+
scale_y_continuous(limits=c(-0.5,7),expand=c(-.05,-.05))+
scale_x_continuous(limits=c(-0.5,7),expand=c(-.05,-.05))+
coord_fixed()+
theme_void()+
theme(legend.position = "bottom",legend.margin=margin(unit(0,"cm")))
additional_elements <- ggdraw()
additional_elements <- additional_elements + draw_label("github.com/Rorevilla", x = 0.89, y = 0.04,colour = "gray50",fontface="bold",size=8.5)
final_plot<-additional_elements+draw_plot(a+ theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "in")))
#Visualizing monopoly
library(tidyverse)
library(hrbrthemes)
library(openxlsx)
library(magrittr)
library(extrafont)
library(ggnewscale)
library(cowplot)
font_import(paths = c("C:/Users/rodrigo.revilla/AppData/Local/Microsoft/Windows/Fonts", prompt = F))
install.packages("extrafontdb")
library(extrafont)
loadfonts()
#Data wrangling
#Generating dataframe
ymins <- c(rep(0,11),0.4,seq(1,5.5,0.5),rep(5.5,9),seq(5.5,1,-0.5))
ymaxs <- c(rep(1,11),1,seq(1.5,5.5,0.5),6.5,rep(6.5,10),seq(5.5,1.5,-0.5))
xmins <- c(seq(5.5,1,-0.5),0,0.4,rep(0,10),seq(1,5.5,0.5),rep(5.5,9))
xmaxs <- c(6.5,seq(5.5,1.5,-0.5),rep(1,12),seq(1.5,5.5,0.5),rep(6.5,10))
id<-c(seq(0,10),10.5,seq(11,39))
tiles <- data.frame(xmins,xmaxs,ymins,ymaxs,id)
ymins <- c(rep(0.8,5),1,2,2.5,3.5,4.5,5,rep(5.5,6),5,4.5,3.5,2,1)
ymaxs <- c(rep(1,5),1.5,2.5,3,4,5,5.5,rep(5.7,6),5.5,5,4,2.5,1.5)
xmins <-c(5,4,2.5,1.5,1,rep(0.8,6),1,2,2.5,3.5,4,5,rep(5.5,5))
xmaxs <-c(5.5,4.5,3,2,1.5,rep(1,6),1.5,2.5,3,4,4.5,5.5,rep(5.7,5))
colors <- c(rep("#945438",2),rep("#abe0f8",3),rep("#d93a96",3),rep("#f7941d",3),rep("#ed1b24",3),rep("#fef200",3),rep("#20b15a",3),rep("#0172ba",2))
group_tiles <- data.frame(xmins,xmaxs,ymins,ymaxs,colors)
simulation_results <- read.csv2('C:/Users/rodrigo.revilla/Desktop/simulation_results.csv',sep=",",header=FALSE)
install.packages("extrafontdb")
library("ggplot2")
library("ggthemes")
library("ggplot2")
library("scales")
library("dplyr")
library("mice")
install.packages(ggthemes)
install.packages("ggthemes")
install.packages("mice")
library("ggplot2")
library("ggthemes")
library("scales")
library("dplyr")
library("mice")
library("randomForest")
install.packages("randomForest")
library("ggplot2")
library("ggthemes")
library("scales")
library("dplyr")
library("mice")
library("randomForest")
library("data.table")
library("gridExtra")
library("gridExtra")
install.packages("gridExtra")
library("ggplot2")
library("ggthemes")
library("scales")
library("dplyr")
library("mice")
library("randomForest")
library("data.table")
library("gridExtra")
library("corrplot")
install.packages("corrplot")
install.packages("GGally")
install.packages("e1071")
library("ggplot2")
library("ggthemes")
library("scales")
library("dplyr")
library("mice")
library("randomForest")
library("data.table")
library("gridExtra")
library("corrplot")
library("GGally")
library("e1071")
train <- read.csv('../input/train.csv', stringAsFactors = F)
train <- read.csv("../input/train.csv", stringAsFactors = F)
train <-read.csv('../input/train.csv', stringsAsFactors = F)
train <-read.csv('../input/train.csv', stringsAsFactors = F)
stock_prices <- read.csv("stock_prices.csv")
install.packages("quantmod")
install.packages("PerformAnalytics")
ticker <- "AAPL"
start_date <- "2020-01-01"
end_date <- "2020-12-31"
stock_data <- getSymbols(ticker, src="yahoo", from=start_date, to=end_date, auto.assign=FALSE)
library("ggplot2")
library("ggthemes")
library("scales")
library("dplyr")
library("mice")
library("randomForest")
library("data.table")
library("gridExtra")
library("corrplot")
library("GGally")
library("e1071")
library("quantmod")
library("PerformanceAnalytics")
library("ggplot2")
library("ggthemes")
library("scales")
library("dplyr")
library("mice")
library("randomForest")
library("data.table")
library("gridExtra")
library("corrplot")
library("GGally")
library("e1071")
library("quantmod")
stock_data <- getSymbols(ticker, src="yahoo", from=start_date, to=end_date, auto.assign=FALSE)
stock_returns <- dailyReturn(stock_data[,"AAPL.Adjusted"])
volatility <- annualizedVolatility(stock_returns, scale=252)
volatility <- annualizedVolatility(stock_returns, scale=252)
install.packages("PerformanceAnalytics")
volatility <- annualizedVolatility(stock_returns, scale=252)
library("ggplot2")
library("ggthemes")
library("scales")
library("dplyr")
library("mice")
library("randomForest")
library("data.table")
library("gridExtra")
library("corrplot")
library("GGally")
library("e1071")
library("quantmod")
library("PerformanceAnalytics")
volatility <- annualizedVolatility(stock_returns, scale=252)
volatility <- annualizedVolatility(stock_returns, scale=252)
volatility <- annualizedVolatility(stock_returns, scale=252)
library("quantmod")
library("PerformanceAnalytics")
library("quantmod")
library("PerformanceAnalytics")
ticker <- "AAPL"
start_date <- "2020-01-01"
end_date <- "2020-12-31"
stock_data <- getSymbols(ticker, src="yahoo", from=start_date, to=end_date, auto.assign=FALSE)
stock_returns <- dailyReturn(stock_data[,"AAPL.Adjusted"])
volatility <- annualizedVolatility(stock_returns, scale=252)
print(volatility)
volatility <- sd(stock_returns) * sqrt(252)
print(volatility)
cd
pwd
pwd
library(tidyverse)
library(modelr)
train_titanic <- read_csv("train_titanic.csv")
test_titanic <- readd_csv("test_titanic.csv")
train_titanic  |>
summarize(mean(Survived))
basline_solution <-
train_titanic |>
select(PassengerID) |>
mutate(Survived = 0)
basline_solution <-
test_titanic |>
select(PassengerID) |>
mutate(Survived = 0)
basline_solution <-
test_titanic |>
select(PassengerID) |>
mutate(Survived = 0)
train_titanic <- read_csv("train_titanic.csv")
test_titanic <- readd_csv("test_titanic.csv")
train_titanic <- read_csv("train_titanic.csv")
test_titanic <- read_csv("test_titanic.csv")
basline_solution <-
test_titanic |>
select(PassengerID) |>
mutate(Survived = 0)
train_titanic <- read_csv("train_titanic.csv")
test_titanic <- read_csv("test_titanic.csv")
train_titanic  |>
summarize(mean(Survived))
basline_solution <-
test_titanic |>
select(PassengerID) |>
mutate(Survived = 0)
basline_solution <-
test_titanic |>
select(PassengerId) |>
mutate(Survived = 0)
basline_solution <-
test_titanic |>
select(PassengerId) |>
mutate(Survived = 0)
basline_solution <-
test_titanic |>
select(PassengerId) |>
mutate(Survived = 0)
baseline_solution
baseline_solution
basline_solution <-
test_titanic |>
select(PassengerId) |>
mutate(Survived = 0)
baseline_solution <-
test_titanic |>
select(PassengerId) |>
mutate(Survived = 0)
baseline solution
baseline_solution <-
test_titanic |>
select(PassengerId) |>
mutate(Survived = 0)
baseline_solution
write_csv(baseline_solution, "baseline_solution.csv")
train_titanic |>
group_by(sex) |>
summarize(mean(Survived))
train_titanic |>
group_by(Sex) |>
summarize(mean(Survived))
train_titanic |>
group_by(Sex) |>
summarize(mean(Survived))
gender_solution <-
test_titanic |>
select(PassengerId, Sex) |>
mutate(Survived = as.integer(Sex == "female")) |>
select(-Sex)
gender_solution <-
test_titanic |>
select(PassengerId, Sex) |>
mutate(Survived = as.integer(Sex == "female")) |>
select(-Sex)
gender_solution
gender_solution <-
test_titanic |>
select(PassengerId, Sex) |>
mutate(Survived = as.integer(Sex == "female"))
gender_solution
gender_solution <-
test_titanic |>
select(PassengerId, Sex) |>
mutate(Survived = as.integer(Sex == "female")) |>
select(-Sex)
gender_solution
gender_solution <-
test_titanic |>
select(PassengerId, Sex) |>
mutate(Survived = as.integer(Sex == "female")) |>
select(-Sex)
gender_train <-
train_titanic |>
select(PassengerId, Sex) |>
mutate(pred = as.integer(Sex == "female")) |>
select(-Sex)
gender_train
gender_train |>
summarize(mean(pred == mean(Survived)))
gender_train |>
summarize(mean(pred == Survived))
gender_train <-
train_titanic |>
select(PassengerId,Survived, Sex) |>
mutate(pred = as.integer(Sex == "female")) |>
select(-Sex)
gender_train |>
summarize(mean(pred == Survived))
train_titanic |>
mutate(Title = str_replace(Name, "[^,]+, ([^\\.]+)", "\\1"))
train_titanic |>
mutate(Title = str_replace(Name, "[^,]+, ([^\\.]+).+", "\\1"))
train_titanic |>
mutate(Title = str_replace(Name, "[^,]+, ([^\\.]+).+", "\\1")) |>
select(Survived, Title) -> titles
titles
titles |>
group_by(Title) |>
summarize(mean(Survived))
titles |>
group_by(Title) |>
summarize(count = n())
titles |>
group_by(Title) |>
summarize(count = n()) |>
arrange(desc(count))
titles |>
group_by(Title) |>
summarize(count = n()) |>
arrange(desc(count))
library(partykit)
install.packages("partykit")
library(partykit)
cf_model1 <- cforest(Survived ~ Fare, data = train_titanic)
train_pred1 <- train_titanic |>
add_preidctions(cf_model1)
train_pred1 <- train_titanic |>
add_predictions(cf_model1)
train_pred1
train_pred1 <- train_titanic |>
add_predictions(cf_model1)
train_pred1
train_pred1 |>
summarize(mean(as.integer(pred >= 0.5) == Survived))
train_titanic |>
mutate(as.integer(Sex == "female"))
train_titanic |>
mutate(Ind_Sex = as.integer(Sex == "female"))
train_titanic |>
mutate(Ind_Sex = as.integer(Sex == "female")) -> train_titanic_ind_sex
cf_model2 <- cforest(Survived ~ Sex, data = train_titanic)
cf_model2 <- cforest(Survived ~ Sex + Fare, data = train_titanic)
cf_model2 <- cforest(Survived ~ Ind_Sex + Fare, data = train_titanic)
cf_model2 <- cforest(Survived ~ Ind_Sex + Fare, data = train_titanic_ind_sex)
cf_model2 <- cforest(Survived ~ Ind_Sex + Fare, data = train_titanic_ind_sex)
cf_model2 <- cforest(Survived ~ Ind_Sex + Fare, data = train_titanic_ind_sex)
cf_model2
cf_model2 <- cforest(Survived ~ Ind_Sex + Fare, data = train_titanic_ind_sex)
cf_model2
train_pred2 <-
train_titanic_ind_sex |>
add_predictions(cf_model2)
train_pred2 |>
summarize(mean(as.integer(pred >= 0.5) == Survived))
